#include<iostream>
#include<fstream>
#include<climits>
#include<vector>
#include<array>

#include "OptiMacroNode.hpp"
#include "Setting.hpp"

using namespace std;

LoopOrder::LoopOrder(string loop1, string loop2, string loop3){
  loop_idc[0] = loop1;
  loop_idc[1] = loop2;
  loop_idc[2] = loop3;

  set = true;
}
/*
void LoopOrder::setupLoopOrder(OptiMacroNode* opti_mn){
  //set nospill matrix
  matrix_nospill = (loop_idc[2] == "m")?"B":(loop_idc[2] == "n")?"A":"C";
  if(matrix_nospill == "A"){
    if(loop_idc[0] == "m"){
      matrix_spilltype1 = "C";
      dblk1_size = opti_mn->c;
      num_dblk1_mem = opti_mn->num_cblk_mem;
      num_dblk1_need = opti_mn->blk_n;
      num_reuse1 = opti_mn->blk_k;
      num_iterate = opti_mn->blk_m;
      idx_mode1 = COL_IDX;

      matrix_spilltype2 = "B";
      dblk2_size = opti_mn->b;
      num_dblk2_mem = opti_mn->num_bblk_mem;
      num_dblk2_need = opti_mn->blk_k*opti_mn->blk_n;
      num_reuse2 = opti_mn->blk_m;
      idx_mode2 = ROWMAJOR_IDX;
    }
    else{
      matrix_spilltype1 = "B";
      dblk1_size = opti_mn->b;
      num_dblk1_mem = opti_mn->num_bblk_mem;
      num_dblk1_need = opti_mn->blk_n;
      num_reuse1 = opti_mn->blk_m;
      num_iterate = opti_mn->blk_k;
      idx_mode1 = COL_IDX;
      
      matrix_spilltype2 = "C";
      dblk2_size = opti_mn->c;
      num_dblk2_mem = opti_mn->num_cblk_mem;
      num_dblk2_need = opti_mn->blk_m*opti_mn->blk_n;
      num_reuse2 = opti_mn->blk_k;
      idx_mode2 = ROWMAJOR_IDX;
    }
  }
  else if(matrix_nospill == "B"){
    if(loop_idc[0] == "k"){
      matrix_spilltype1 = "A";
      dblk1_size = opti_mn->a;
      num_dblk1_mem = opti_mn->num_ablk_mem;
      num_dblk1_need = opti_mn->blk_m;
      num_reuse1 = opti_mn->blk_n;
      num_iterate = opti_mn->blk_k;
      idx_mode1 = ROW_IDX;

      matrix_spilltype2 = "C";
      dblk2_size = opti_mn->c;
      num_dblk2_mem = opti_mn->num_cblk_mem;
      num_dblk2_need = opti_mn->blk_m*opti_mn->blk_n;
      num_reuse2 = opti_mn->blk_k;
      idx_mode2 = COLMAJOR_IDX;
    }
    else{
      matrix_spilltype1 = "C";
      dblk1_size = opti_mn->c;
      num_dblk1_mem = opti_mn->num_cblk_mem;
      num_dblk1_need = opti_mn->blk_m;
      num_reuse1 = opti_mn->blk_k;
      num_iterate = opti_mn->blk_n;
      idx_mode1 = ROW_IDX;
      
      matrix_spilltype2 = "A";
      dblk2_size = opti_mn->a;
      num_dblk2_mem = opti_mn->num_ablk_mem;
      num_dblk2_need = opti_mn->blk_m*opti_mn->blk_k;
      num_reuse2 = opti_mn->blk_n;
      idx_mode2 = COLMAJOR_IDX;
    }
  }
  else{
    if(loop_idc[0] == "m"){
      matrix_spilltype1 = "A";
      dblk1_size = opti_mn->a;
      num_dblk1_mem = opti_mn->num_ablk_mem;
      num_dblk1_need = opti_mn->blk_k;
      num_reuse1 = opti_mn->blk_n;
      num_iterate = opti_mn->blk_m;
      idx_mode1 = COL_IDX;
      
      matrix_spilltype2 = "B";
      dblk2_size = opti_mn->b;
      num_dblk2_mem = opti_mn->num_bblk_mem;
      num_dblk2_need = opti_mn->blk_k*opti_mn->blk_n;
      num_reuse2 = opti_mn->blk_m;
      idx_mode2 = COLMAJOR_IDX;
    }
    else{
      matrix_spilltype1 = "B";
      dblk1_size = opti_mn->b;
      num_dblk1_mem = opti_mn->num_bblk_mem;
      num_dblk1_need = opti_mn->blk_k;
      num_reuse1 = opti_mn->blk_m;
      num_iterate = opti_mn->blk_n;
      idx_mode1 = ROW_IDX;
      
      matrix_spilltype2 = "A";
      dblk2_size = opti_mn->a;
      num_dblk2_mem = opti_mn->num_ablk_mem;
      num_dblk2_need = opti_mn->blk_k*opti_mn->blk_m;
      num_reuse2 = opti_mn->blk_n;
      idx_mode2 = ROWMAJOR_IDX;
    }
  }
}
*/


void LoopOrder::setDblkSPAddrIdx(){
  data_arrays[matrix_nospill]->setDblkSPAddrIdx(ZERO_IDX);
  data_arrays[matrix_spilltype1]->setDblkSPAddrIdx(idx_mode1);
  data_arrays[matrix_spilltype2]->setDblkSPAddrIdx(idx_mode2);
}

Parameters::Parameters(){
}

void Parameters::PrintInfo(){
  cout << endl << "Extended input size: " << endl;
  for(auto &i: axes){
    cout << "extend input size in " << i.first << ": " << i.second.ex_input_size << endl;
  }

  cout << endl << "First blocking level: " << endl;
  cout << "Block dimension: " << endl;
  for(auto &i: axes){
    cout << "    blk_dim_" << i.first << ": " << i.second.blk_dim << endl;
  }
  cout << "Data block size: " << endl;
  for(auto &i: dblks){
    cout << "    block size of " << i.first << ": " << i.second.size << endl;
  }

  cout << endl << "Second blocking level: " << endl;
  cout << "Sub-block dimension: " << endl;
  for(auto &i: axes){
    cout << "   subblk_dim_" << i.first << ": " << i.second.subblk_dim << endl;
  }

  cout << endl << "Compute block parameters: " << endl;
  for(auto &i: cbs){
    for(auto &j: i.second){
      cout << "CB " << i.first+"_"+j.first << ": parallelization " << j.second.num_cb << " stage " << j.second.k_stage << endl;
    }
  }

  cout << endl << "Loop order: " << endl;
  cout << loop_order.loop_idc[0] << "->" << loop_order.loop_idc[1] << "->" << loop_order.loop_idc[2] << endl;

  cout << endl << "Estimated number of spills: " << num_spill << endl;
  cout << "Estimated #compute cycles per block: " << blk_compute_cycles << endl;
  cout << "Estimated #compute cycles: " << total_compute_cycles << endl;
}

OptiMacroNode::OptiMacroNode(int in_m, int in_n, int in_k, Parameters& in_opti_para):opti_para(in_opti_para){
  para.axes["i"].input_size = in_m;
  para.axes["j"].input_size = in_n;
  para.axes["l"].input_size = in_k;
}


int OptiMacroNode::MM_MinMem(int blk_dimi, int blk_dimj, int blk_diml){
    return (blk_dimi*blk_diml+blk_dimj*blk_diml+blk_dimi*blk_dimj);
}

int OptiMacroNode::MM_MinBank(int m_subblk, int n_subblk, int k_subblk){
  int port_per_bank = Memory::membanks[0].num_port;

  int num_port_a = k_subblk*m_subblk;
  int num_bank_a = (num_port_a%port_per_bank==0)?num_port_a/port_per_bank:num_port_a/port_per_bank+1;

  int num_port_b = k_subblk*n_subblk;
  int num_bank_b = (num_port_b%port_per_bank==0)?num_port_b/port_per_bank:num_port_b/port_per_bank+1;

  int num_port_c = 2*m_subblk*n_subblk;
  int num_bank_c = (num_port_c%port_per_bank==0)?num_port_c/port_per_bank:num_port_c/port_per_bank+1;

  return (num_bank_a+num_bank_b+num_bank_c);
}

int OptiMacroNode::MM_MinPort(int sb_dimi, int sb_dimj, int sb_diml){
  return (sb_diml*sb_dimi + sb_diml*sb_dimj + 2*sb_dimi*sb_dimj);
}


void OptiMacroNode::MM_genSubblkSet(){
  num_port_used = 0;
  for(int subblk_dimi=1; subblk_dimi<=para.axes["i"].input_size; subblk_dimi++){
    if(MM_MinPort(subblk_dimi, 1, 1) > global_sp->total_port){
      break;
    }
    for(int subblk_dimj=1; subblk_dimj<=para.axes["j"].input_size; subblk_dimj++){
      if(MM_MinPort(subblk_dimi, subblk_dimj, 1) > global_sp->total_port){
        break;
      }
      for(int subblk_diml=1; subblk_diml<=para.axes["l"].input_size; subblk_diml++){
	int min_bank = MM_MinBank(subblk_dimi, subblk_dimj, subblk_diml);
	if(min_bank < Memory::num_bank){
	  int min_port = MM_MinPort(subblk_dimi, subblk_dimj, subblk_diml);
	  if(min_port >= num_port_used){
	    array<int,3> subblk_dim = {subblk_dimi, subblk_dimj, subblk_diml};
	    if(min_port > num_port_used){
	      sb_dim_set.clear();
	      num_port_used = min_port;
	    }
	    sb_dim_set.push_back(subblk_dim);
	  }
	}
	else{
	  break;
	}
      }
    }
  }
}

void OptiMacroNode::MM_getPerf(unsigned long long& perf, unsigned long long& blk_perf){

  int num_subblk_level = blk_dimi_sb*blk_dimj_sb;
  int latency_cb = (subblk_diml-1)+3+1+2;

  blk_perf = max(num_subblk_level, latency_cb)*blk_diml_sb+min(num_subblk_level,latency_cb)-1;
  perf = blk_perf*blk_m*blk_n*blk_k;
}


//reused blocks on line for full matrix
unsigned long long spill_normal(blk_info& spill_dblk, int num_exist, int num_reuse, int iterate){
  unsigned long long spill;
  spill = max(num_exist-spill_dblk.num_blk_mem, 0);
  spill = spill*spill_dblk.size;
  spill = spill*(num_reuse-1);
  spill = spill*iterate;
  return spill;
}

unsigned long long OptiMacroNode::MM_spill(LoopOrder& lo, unsigned long long& spill1, unsigned long long& spill2){
  int blk_m = para.axes["i"].num_blk;
  int blk_n = para.axes["j"].num_blk;
  int blk_k = para.axes["l"].num_blk;

  string matrix_nospill = (lo.loop_idc[2] == "i")?"B":(lo.loop_idc[2] == "j")?"A":"C";
  if(matrix_nospill == "A"){
    if(lo.loop_idc[0] == "i"){
      lo.matrix_spilltype1 = "C";
      spill1 = spill_normal(para.dblks["C"],blk_n,blk_k,blk_m);
      lo.idx_mode1 = COL_IDX;

      lo.matrix_spilltype2 = "B";
      spill2 = spill_normal(para.dblks["B"],blk_k*blk_n,blk_m,1);
      lo.idx_mode2 = ROWMAJOR_IDX;
    }
    else{
      lo.matrix_spilltype1 = "B";
      spill1 = spill_normal(para.dblks["B"],blk_n,blk_m,blk_k);
      lo.idx_mode1 = COL_IDX;
      
      lo.matrix_spilltype2 = "C";
      spill2 = spill_normal(para.dblks["C"],blk_m*blk_n,blk_k,1);
      lo.idx_mode2 = ROWMAJOR_IDX;
    }
  }
  else if(matrix_nospill == "B"){
    if(lo.loop_idc[0] == "l"){
      lo.matrix_spilltype1 = "A";
      spill1 = spill_normal(para.dblks["A"],blk_m,blk_n,blk_k);
      lo.idx_mode1 = ROW_IDX;

      lo.matrix_spilltype2 = "C";
      spill2 = spill_normal(para.dblks["C"],blk_m*blk_n,blk_k,1);
      lo.idx_mode2 = COLMAJOR_IDX;
    }
    else{
      lo.matrix_spilltype1 = "C";
      spill1 = spill_normal(para.dblks["C"],blk_m,blk_k,blk_n);
      lo.idx_mode1 = ROW_IDX;
      
      lo.matrix_spilltype2 = "A";
      spill2 = spill_normal(para.dblks["A"],blk_m*blk_k,blk_n,1);
      lo.idx_mode2 = COLMAJOR_IDX;
    }
  }
  else{
    if(lo.loop_idc[0] == "i"){
      lo.matrix_spilltype1 = "A";
      spill1 = spill_normal(para.dblks["A"],blk_k,blk_n,blk_m);
      lo.idx_mode1 = COL_IDX;
      
      lo.matrix_spilltype2 = "B";
      spill2 = spill_normal(para.dblks["B"],blk_k*blk_n,blk_m,1);
      lo.idx_mode2 = COLMAJOR_IDX;
    }
    else{
      lo.matrix_spilltype1 = "B";
      spill1 = spill_normal(para.dblks["B"],blk_k,blk_m,blk_n);
      lo.idx_mode1 = ROW_IDX;
      
      lo.matrix_spilltype2 = "A";
      spill2 = spill_normal(para.dblks["A"],blk_k*blk_m,blk_n,1);
      lo.idx_mode2 = ROWMAJOR_IDX;
    }
  }
    unsigned long long spill = spill1+spill2;
    return spill;
}

void OptiMacroNode::MM_optiPara(){
  num_spill = ULLONG_MAX;
  perf = ULLONG_MAX;
  
  MM_genSubblkSet();

  for(auto &i: sb_dim_set){

	  para.axes["i"].subblk_dim = i[0];
	  para.axes["j"].subblk_dim = i[1];
	  para.axes["l"].subblk_dim = i[2];
	  for(auto &ax: para.axes){
	    ax.second.num_subblk = (ax.second.input_size%ax.second.subblk_dim==0)?ax.second.input_size/ax.second.subblk_dim:ax.second.input_size/ax.second.subblk_dim+1;
	  }

	  int port_per_bank = Memory::membanks[0].num_port;
	  para.dblks["A"].num_port = para.axes["l"].subblk_dim*para.axes["i"].subblk_dim;
	  para.dblks["B"].num_port = para.axes["l"].subblk_dim*para.axes["j"].subblk_dim;
	  para.dblks["C"].num_port = 2*para.axes["i"].subblk_dim*para.axes["j"].subblk_dim;
	  for(auto &d: para.dblks){
	    d.second.num_bank = (d.second.num_port%port_per_bank==0)?d.second.num_port/port_per_bank:d.second.num_port/port_per_bank+1;
	  }

	  for(int blk_dimi_sb=1; blk_dimi_sb<=para.axes["i"].num_subblk; blk_dimi_sb++){
	    int blk_dimi = blk_dimi_sb*para.axes["i"].subblk_dim;
	    if(MM_MinMem(blk_dimi, 1, 1) > global_sp->total_size){
	      break;
	    }
	    for(int blk_dimj_sb=1; blk_dimj_sb<=para.axes["j"].num_subblk; blk_dimj_sb++){
	      int blk_dimj = blk_dimj_sb*para.axes["j"].subblk_dim;
	      if(MM_MinMem(blk_dimi, blk_dimj, 1) > global_sp->total_size){
	        break;
	      }
	      for(int blk_diml_sb=1; blk_diml_sb<=para.axes["l"].num_subblk; blk_diml_sb++){
		int blk_diml = blk_diml_sb*para.axes["l"].subblk_dim;
	        if(MM_MinMem(blk_dimi, blk_dimj, blk_diml) > global_sp->total_size){
	          break;
	        }

		para.axes["i"].blk_dim = blk_dimi;
		para.axes["j"].blk_dim = blk_dimj;
		para.axes["l"].blk_dim = blk_diml;

		for(auto &ax: para.axes){
		  ax.second.num_blk = (ax.second.input_size%ax.second.blk_dim==0)?ax.second.input_size/ax.second.blk_dim: ax.second.input_size/ax.second.blk_dim+1;
		  ax.second.ex_input_size = ax.second.num_blk*ax.second.blk_dim;
		}

		para.dblks["A"].size = para.axes["i"].blk_dim*para.axes["l"].blk_dim;
		para.dblks["B"].size = para.axes["j"].blk_dim*para.axes["l"].blk_dim;
		para.dblks["C"].size = para.axes["i"].blk_dim*para.axes["j"].blk_dim;
                
		int bank_size = Memory::membanks[0].size;
		bool can_fit = true;
		for(auto &d: para.dblks){
		  d.second.interval = (d.second.size%d.second.num_bank==0)? d.second.size/d.second.num_bank: d.second.size/d.second.num_bank+1;
		  d.second.num_blk_mem = bank_size/d.second.interval;
		  can_fit = can_fit && (d.second.num_blk_mem >= 1);
		}

		if(can_fit){
	 	
		  unsigned long long cur_spill;
		  unsigned long long cur_spill1;
		  unsigned long long cur_spill2;
	
		  //find the smallest num_dblk
		  if((para.dblks["A"].num_blk_mem <= para.dblks["B"].num_blk_mem) && (para.dblks["A"].num_blk_mem <= para.dblks["C"].num_blk_mem)){
		      LoopOrder order1("i","l","j");
		      LoopOrder order2("l","i","j");

		      unsigned long long spill11;
		      unsigned long long spill12;
		      unsigned long long spill1 = MM_spill(order1, spill11, spill12);

		      unsigned long long spill21;
		      unsigned long long spill22;
		      unsigned long long spill2 = MM_spill(order2, spill21, spill22);

		      if(spill1 <= spill2){
			cur_spill = spill1;
			para.loop_order = order1;
			cur_spill1 = spill11;
			cur_spill2 = spill12;
		      }
		      else{
			cur_spill = spill2;
			para.loop_order = order2;
			cur_spill1 = spill21;
			cur_spill2 = spill22;
		      }
		  }
		  else if((para.dblks["B"].num_blk_mem <= para.dblks["A"].num_blk_mem) && (para.dblks["B"].num_blk_mem <= para.dblks["C"].num_blk_mem)){
		      LoopOrder order1("j","l","i");
		      LoopOrder order2("l","j","i");

		      unsigned long long spill11;
		      unsigned long long spill12;
		      unsigned long long spill1 = MM_spill(order1, spill11, spill12);
		      
		      unsigned long long spill21;
		      unsigned long long spill22;
		      unsigned long long spill2 = MM_spill(order2, spill21, spill22);

		      if(spill1 <= spill2){
			cur_spill = spill1;
			para.loop_order = order1;
			cur_spill1 = spill11;
			cur_spill2 = spill12;
		      }
		      else{
			cur_spill = spill2;
			para.loop_order = order2;
			cur_spill1 = spill21;
			cur_spill2 = spill22;
		      }
		  }
		  else{
		      LoopOrder order1("i","j","l");
		      LoopOrder order2("j","i","l");

		      unsigned long long spill11;
		      unsigned long long spill12;
		      unsigned long long spill1 = MM_spill(order1, spill11, spill12);
		      
		      unsigned long long spill21;
		      unsigned long long spill22;
		      unsigned long long spill2 = MM_spill(order2, spill21, spill22);

		      if(spill1 <= spill2){
			cur_spill = spill1;
			para.loop_order = order1;
			cur_spill1 = spill11;
			cur_spill2 = spill12;
		      }
		      else{
			cur_spill = spill2;
			para.loop_order = order2;
			cur_spill1 = spill21;
			cur_spill2 = spill22;
		      }
		  }
			
		  if(cur_spill < num_spill){
		    opti_para = para;
		    opti_para.num_spill = cur_spill;

		    num_spill = cur_spill;
		  }

		}
	      }
	    }
	  }
  }

  opti_para.cbs["mm"]["acc_mul"].k_stage = opti_para.axes["l"].subblk_dim;
  opti_para.cbs["mm"]["acc_mul"].num_cb = opti_para.axes["i"].subblk_dim*opti_para.axes["j"].subblk_dim;
}




void OptiMacroNode::LU_genSubblkSet(){
  num_port_used = 0;
  int subblk_diml = 1;
  for(int subblk_dimi=1; subblk_dimi<=para.axes["i"].input_size; subblk_dimi++){
    if(MM_MinPort(subblk_dimi, 1, 1) > global_sp->total_port){
      break;
    }
    for(int subblk_dimj=1; subblk_dimj<=para.axes["j"].input_size; subblk_dimj++){
      if(MM_MinPort(subblk_dimi, subblk_dimj, 1) > global_sp->total_port){
        break;
      }
      int min_bank = MM_MinBank(subblk_dimi, subblk_dimj, subblk_diml);
      if(min_bank < Memory::num_bank){
	int min_port = MM_MinPort(subblk_dimi, subblk_dimj, subblk_diml);
	if(min_port >= num_port_used){
	  array<int,3> subblk_dim = {subblk_dimi, subblk_dimj, subblk_diml};
	  if(min_port > num_port_used){
	    sb_dim_set.clear();
	    num_port_used = min_port;
	  }
	  sb_dim_set.push_back(subblk_dim);
	}
      }
      else{
	break;
      }
    }
  }
}

unsigned long long OptiMacroNode::LU_spill(LoopOrder& lo, unsigned long long& spill1, unsigned long long& spill2){
  int num_blk = para.axes["i"].num_blk;
  if(lo.loop_idc[2] == "l"){
    if(lo.loop_idc[0] == "i"){
      //continuous reuse: A
      //line reuse: L
      //plane reuse: U
      spill1 = 0;
      blk_info& d = para.dblks["L"];
      for(int i=0; i<num_blk; i++){
        unsigned long long spill_t = max(i-d.num_blk_mem,0);
	spill_t = spill_t*d.size;
	spill_t = spill_t*(num_blk-1);
	spill1 += spill_t;
      }

      spill2 = 0;
      d = para.dblks["U"];
      int num_exist = 0;
      for(int i=0; i<num_blk; i++){
	num_exist += num_blk-i;
        unsigned long long spill_t = max(num_exist-d.num_blk_mem,0);
	spill_t = spill_t*d.size;
	spill2 += spill_t;
      }
    }
    else{
      //continuous reuse: A
      //line reuse: U
      //plane reuse: L
      spill1 = 0;
      blk_info& d = para.dblks["U"];
      for(int i=0; i<num_blk; i++){
        unsigned long long spill_t = max(i-d.num_blk_mem,0);
	spill_t = spill_t*d.size;
	spill_t = spill_t*(num_blk-1);
	spill1 += spill_t;
      }

      spill2 = 0;
      d = para.dblks["L"];
      int num_exist = 0;
      for(int i=0; i<num_blk; i++){
	num_exist += num_blk-i;
        unsigned long long spill_t = max(num_exist-d.num_blk_mem,0);
	spill_t = spill_t*d.size;
	spill2 += spill_t;
      }
    }
  }
  else if(lo.loop_idc[2] == "i"){
    if(lo.loop_idc[0] == "j"){
      //continously reuse: U
      //line reuse: A
      //plane reuse: L
      spill1 = 0;
      blk_info& d = para.dblks["A"];
      for(int i=0; i<num_blk; i++){
	for(int j=num_blk; j>=num_blk-i; j--){
	  unsigned long long spill_t = max(j-d.num_blk_mem,0);
	  spill_t = spill_t * d.size;
	  spill1 += spill_t;
	}
      }

      spill2 = 0;
      d = para.dblks["L"];
      int num_exist = 0;
      for(int i=0; i<num_blk; i++){
	num_exist += num_blk-i;
        unsigned long long spill_t = max(num_exist-d.num_blk_mem,0);
	spill_t = spill_t*d.size;
	spill2 += spill_t;
      }
    }
    else{
      //continuously reuse: U
      //line reuse: L
      //plane reuse: A
      spill1 = 0;
      blk_info& d = para.dblks["L"];
      for(int i=0; i<num_blk; i++){
        unsigned long long spill_t = max(num_blk-i-d.num_blk_mem,0);
	spill_t = spill_t*d.size;
	spill_t = spill_t*(num_blk-i-1);
	spill1 += spill_t;
      }

      spill2 = 0;
      d = para.dblks["A"];
      for(int i=0; i<num_blk; i++){
        unsigned long long spill_t = max((num_blk-i)*(num_blk-i)-d.num_blk_mem,0);
	spill_t = spill_t*d.size;
	spill2 += spill_t;
      }
    }
  }
  else{
    if(lo.loop_idc[0] == "i"){
      //continuously reuse: L
      //line reuse: A
      //plane reuse: U
      spill1 = 0;
      blk_info& d = para.dblks["A"];
      for(int i=0; i<num_blk; i++){
	for(int j=num_blk; j>=num_blk-i; j--){
	  unsigned long long spill_t = max(j-d.num_blk_mem,0);
	  spill_t = spill_t * d.size;
	  spill1 += spill_t;
	}
      }

      spill2 = 0;
      d = para.dblks["U"];
      int num_exist = 0;
      for(int i=0; i<num_blk; i++){
	num_exist += num_blk-i;
        unsigned long long spill_t = max(num_exist-d.num_blk_mem,0);
	spill_t = spill_t*d.size;
	spill2 += spill_t;
      }
    }
    else{
      //continuously reuse: L
      //line reuse: U
      //plane reuse: A
      spill1 = 0;
      blk_info& d = para.dblks["U"];
      for(int i=0; i<num_blk; i++){
        unsigned long long spill_t = max(num_blk-i-1, 0);
	spill_t = spill_t*d.size;
	spill_t = spill_t*(num_blk-i-1);
	spill1 += spill_t;
      }
      spill2 = 0;
      d = para.dblks["A"];
      for(int i=0; i<num_blk; i++){
        unsigned long long spill_t = max((num_blk-i)*(num_blk-i)-d.num_blk_mem,0);
	spill_t = spill_t*d.size;
	spill2 += spill_t;
      }
    }
  }
  unsigned long long spill = spill1 + spill2;
  return spill;
}

void OptiMacroNode::LU_optiPara(){
  num_spill = ULLONG_MAX;
  perf = ULLONG_MAX;
  
  LU_genSubblkSet();

  for(auto &i: sb_dim_set){

	  para.axes["i"].subblk_dim = i[0];
	  para.axes["j"].subblk_dim = i[1];
	  para.axes["l"].subblk_dim = i[2];
	  for(auto &ax: para.axes){
	    ax.second.num_subblk = (ax.second.input_size%ax.second.subblk_dim==0)?ax.second.input_size/ax.second.subblk_dim:ax.second.input_size/ax.second.subblk_dim+1;
	  }

	  int port_per_bank = Memory::membanks[0].num_port;
	  para.dblks["L"].num_port = para.axes["l"].subblk_dim*para.axes["i"].subblk_dim;
	  para.dblks["U"].num_port = para.axes["l"].subblk_dim*para.axes["j"].subblk_dim;
	  para.dblks["A"].num_port = 2*para.axes["i"].subblk_dim*para.axes["j"].subblk_dim;
	  for(auto &d: para.dblks){
	    d.second.num_bank = (d.second.num_port%port_per_bank==0)?d.second.num_port/port_per_bank:d.second.num_port/port_per_bank+1;
	  }

	  int blk_dim;
	  for(blk_dim=1; blk_dim<=para.axes["i"].input_size; blk_dim++){
	    if(MM_MinMem(blk_dim, blk_dim, blk_dim) > global_sp->total_size){
	      break;
	    }

		para.axes["i"].blk_dim = blk_dim;
		para.axes["j"].blk_dim = blk_dim;
		para.axes["l"].blk_dim = blk_dim;

		for(auto &ax: para.axes){
		  ax.second.num_blk = (ax.second.input_size%ax.second.blk_dim==0)?ax.second.input_size/ax.second.blk_dim: ax.second.input_size/ax.second.blk_dim+1;
		  ax.second.ex_input_size = ax.second.num_blk*ax.second.blk_dim;
		}

		para.dblks["L"].size = para.axes["i"].blk_dim*para.axes["i"].blk_dim;
		para.dblks["U"].size = para.axes["i"].blk_dim*para.axes["i"].blk_dim;
		para.dblks["A"].size = para.axes["i"].blk_dim*para.axes["i"].blk_dim;
                
		int bank_size = Memory::membanks[0].size;
		bool can_fit = true;
		for(auto &d: para.dblks){
		  d.second.interval = (d.second.size%d.second.num_bank==0)? d.second.size/d.second.num_bank: d.second.size/d.second.num_bank+1;
		  d.second.num_blk_mem = bank_size/d.second.interval;
		  can_fit = can_fit && (d.second.num_blk_mem >= 1);
		}

		if(can_fit){
	 	
		  unsigned long long cur_spill;
		  unsigned long long cur_spill1;
		  unsigned long long cur_spill2;
	
		  //find the smallest num_dblk
		  if((para.dblks["L"].num_blk_mem <= para.dblks["U"].num_blk_mem) && (para.dblks["L"].num_blk_mem <= para.dblks["A"].num_blk_mem)){
		      LoopOrder order1("i","l","j");
		      LoopOrder order2("l","i","j");

		      unsigned long long spill11;
		      unsigned long long spill12;
		      unsigned long long spill1 = LU_spill(order1, spill11, spill12);

		      unsigned long long spill21;
		      unsigned long long spill22;
		      unsigned long long spill2 = LU_spill(order2, spill21, spill22);

		      if(spill1 <= spill2){
			cur_spill = spill1;
			para.loop_order = order1;
			cur_spill1 = spill11;
			cur_spill2 = spill12;
		      }
		      else{
			cur_spill = spill2;
			para.loop_order = order2;
			cur_spill1 = spill21;
			cur_spill2 = spill22;
		      }
		  }
		  else if((para.dblks["U"].num_blk_mem <= para.dblks["L"].num_blk_mem) && (para.dblks["U"].num_blk_mem <= para.dblks["A"].num_blk_mem)){
		      LoopOrder order1("j","l","i");
		      LoopOrder order2("l","j","i");

		      unsigned long long spill11;
		      unsigned long long spill12;
		      unsigned long long spill1 = LU_spill(order1, spill11, spill12);
		      
		      unsigned long long spill21;
		      unsigned long long spill22;
		      unsigned long long spill2 = LU_spill(order2, spill21, spill22);

		      if(spill1 <= spill2){
			cur_spill = spill1;
			para.loop_order = order1;
			cur_spill1 = spill11;
			cur_spill2 = spill12;
		      }
		      else{
			cur_spill = spill2;
			para.loop_order = order2;
			cur_spill1 = spill21;
			cur_spill2 = spill22;
		      }
		  }
		  else{
		      LoopOrder order1("i","j","l");
		      LoopOrder order2("j","i","l");

		      unsigned long long spill11;
		      unsigned long long spill12;
		      unsigned long long spill1 = LU_spill(order1, spill11, spill12);
		      
		      unsigned long long spill21;
		      unsigned long long spill22;
		      unsigned long long spill2 = LU_spill(order2, spill21, spill22);

		      if(spill1 <= spill2){
			cur_spill = spill1;
			para.loop_order = order1;
			cur_spill1 = spill11;
			cur_spill2 = spill12;
		      }
		      else{
			cur_spill = spill2;
			para.loop_order = order2;
			cur_spill1 = spill21;
			cur_spill2 = spill22;
		      }
		  }
			
		  if(cur_spill < num_spill){
		    opti_para = para;
		    opti_para.num_spill = cur_spill;

		    num_spill = cur_spill;
		  }

		}
	  }
  }
  //*****************mn temp level parameters
  opti_para.cbs["mm"]["sub_mul"].num_cb = opti_para.axes["i"].subblk_dim*opti_para.axes["j"].subblk_dim;
  opti_para.cbs["mm"]["sub_mul"].k_stage = 1;

  opti_para.cbs["lu"]["sub_mul"].num_cb = opti_para.axes["i"].subblk_dim*opti_para.axes["j"].subblk_dim;
  opti_para.cbs["lu"]["sub_mul"].k_stage = 1;
  
  opti_para.cbs["lu"]["copy"].num_cb = opti_para.axes["j"].subblk_dim;
  opti_para.cbs["lu"]["div"].num_cb = opti_para.axes["i"].subblk_dim;
  
  opti_para.cbs["lucpl"]["sub_mul"].num_cb = opti_para.axes["i"].subblk_dim*opti_para.axes["j"].subblk_dim;
  opti_para.cbs["lucpl"]["sub_mul"].k_stage = 1;
  opti_para.cbs["lucpl"]["div"].num_cb = opti_para.axes["i"].subblk_dim;

  opti_para.cbs["trs"]["div"].num_cb = opti_para.axes["j"].subblk_dim;
  opti_para.cbs["trs"]["copy"].num_cb = opti_para.axes["j"].subblk_dim;
  opti_para.cbs["trs"]["sub_mul"].num_cb = opti_para.axes["i"].subblk_dim*opti_para.axes["j"].subblk_dim;
  opti_para.cbs["trs"]["sub_mul"].k_stage = 1;

}

void OptiMacroNode::optiPara(){
  if(app == "MM"){
    MM_optiPara();
  }
  else if(app == "LU"){
    LU_optiPara();
  }
}

void OptiMacroNode::setPara(){
  
  //*****************App level parameters
  opti_para.axes["i"].subblk_dim = 3;
  opti_para.axes["j"].subblk_dim = 4;
  
  //opti_para.subblk_dim["mm_i"] = 6;
  //opti_para.subblk_dim["mm_j"] = 2;
  //opti_para.subblk_dim["mm_l"] = 1;
  
  opti_para.axes["i"].blk_dim = 8;
  opti_para.axes["j"].blk_dim = 8;

  //opti_para.blk_dim["mm_i"] = 48;
  //opti_para.blk_dim["mm_j"] = 6;
  //opti_para.blk_dim["mm_l"] = 2;

  opti_para.axes["i"].ex_input_size = opti_para.axes["i"].blk_dim;
  opti_para.axes["j"].ex_input_size = opti_para.axes["j"].blk_dim;

  //opti_para.ex_input_size["mm_m"] = opti_para.blk_dim["mm_i"];
  //opti_para.ex_input_size["mm_n"] = opti_para.blk_dim["mm_j"];
  //opti_para.ex_input_size["mm_k"] = opti_para.blk_dim["mm_l"];

  opti_para.dblks["Q"].num_port = 3;
  opti_para.dblks["R"].num_port = 4;
  opti_para.dblks["A"].num_port = 24;

  //opti_para.num_port["MM_A"] = 6;
  //opti_para.num_port["MM_B"] = 2;
  //opti_para.num_port["MM_C"] = 24;

  opti_para.num_bank["L"] = 2;
  opti_para.num_bank["U"] = 2;
  opti_para.num_bank["A"] = 12;

  //opti_para.num_bank["MM_A"] = 3;
  //opti_para.num_bank["MM_B"] = 1;
  //opti_para.num_bank["MM_C"] = 12;

  opti_para.num_blk["i"] = 1;
  opti_para.num_blk["j"] = 1;

  //opti_para.num_blk["mm_i"] = 1;
  //opti_para.num_blk["mm_j"] = 1;
  //opti_para.num_blk["mm_l"] = 1;
  //***************************************

  //*****************mn temp level parameters
  opti_para.cbs["lu"]["sub_mul"].num_cb = 12;
  opti_para.cbs["lu"]["sub_mul"].k_stage = 1;
  
  opti_para.cbs["lu"]["copy"].num_cb = 4;
  opti_para.cbs["lu"]["div"].num_cb = 3;
  
  opti_para.cbs["lucpl"]["sub_mul"].num_cb = 12;
  opti_para.cbs["lucpl"]["sub_mul"].k_stage = 1;
  opti_para.cbs["lucpl"]["div"].num_cb = 3;

  opti_para.cbs["trs"]["div"].num_cb = 4;
  opti_para.cbs["trs"]["copy"].num_cb = 4;
  opti_para.cbs["trs"]["sub_mul"].num_cb = 12;
  opti_para.cbs["trs"]["sub_mul"].k_stage = 1;

  opti_para.cbs["mm"]["acc_mul"].num_cb = 12;
  opti_para.cbs["mm"]["acc_mul"].k_stage = 1;
  
  //opti_para.loop_order = LoopOrder("m","n","k");

  //opti_para.num_spill = 0;
  //opti_para.blk_compute_cycles = 0;
  //opti_para.total_compute_cycles = 0;
  //opti_para.num_spill = cur_spill;
  //opti_para.total_compute_cycles = cur_perf;
}


/*
bool OptiMacroNode::ConstraintBW_buffer(int k_subblk, int m_subblk, int n_subblk){
  int port_per_bank = Memory::membanks[0].num_port;

  int num_port_a = k_subblk*m_subblk;
  num_bank_a = (num_port_a%port_per_bank==0)?num_port_a/port_per_bank:num_port_a/port_per_bank+1;

  int num_port_b = k_subblk*n_subblk;
  num_bank_b = (num_port_b%port_per_bank==0)?num_port_b/port_per_bank:num_port_b/port_per_bank+1;

  int num_port_c = 2*m_subblk*n_subblk;
  num_bank_c = (num_port_c%port_per_bank==0)?num_port_c/port_per_bank:num_port_c/port_per_bank+1;

  if(2*num_bank_a+2*num_bank_b+2*num_bank_c <= Memory::num_bank){
    return true;
  }
  else{
    return false;
  }
}


unsigned long long OptiMacroNode::spill_a_buffer(){
  unsigned long long spill;
  int num_a_region = 2*Memory::membanks[0].size/a_region;

  if(num_a_region >= blk_k){
    spill = 0;
  }
  else{
    spill = a*(blk_k+1-num_a_region)*(blk_n-1)*blk_m;
  }
  return spill;
}

unsigned long long OptiMacroNode::spill_b_buffer(){
  unsigned long long spill;
  int num_b_region = 2*Memory::membanks[0].size/b_region;

  if(num_b_region >= blk_n*blk_k){
    spill = 0;
  }
  else{
    spill = b*(blk_n*blk_k+1-num_b_region)*(blk_m-1);
  }
  return spill;
}

void OptiMacroNode::optiPara_buffer(){
  //cout << "Memory banks: " << Memory::num_bank << endl;
  //cout << "bank 0 size: " << Memory::membanks[0].size << endl;

  num_spill = LLONG_MAX;
  perf = LLONG_MAX;
  for(subblk_dimi=1; subblk_dimi<=m; subblk_dimi++){
    for(subblk_dimj=1; subblk_dimj<=n; subblk_dimj++){
      for(subblk_diml=1; subblk_diml<=k; subblk_diml++){
 	if(ConstraintBW_buffer(subblk_diml, subblk_dimi, subblk_dimj)){
	  cout << endl;
	  //cout << "subblk dimi: " << subblk_dimi << endl;
	  //cout << "subblk dimj: " << subblk_dimj << endl;
	  //cout << "subblk diml: " << subblk_diml << endl;

	  int subblk_m = (m%subblk_dimi==0)?m/subblk_dimi:m/subblk_dimi+1;
	  int subblk_n = (n%subblk_dimj==0)?n/subblk_dimj:n/subblk_dimj+1;
	  int subblk_k = (k%subblk_diml==0)?k/subblk_diml:k/subblk_diml+1;
	
	  for(blk_dimi_sb=1; blk_dimi_sb<=subblk_m; blk_dimi_sb++){
	    blk_dimi = blk_dimi_sb*subblk_dimi;
	    for(blk_dimj_sb=1; blk_dimj_sb<=subblk_n; blk_dimj_sb++){
	      blk_dimj = blk_dimj_sb*subblk_dimj;
	      for(blk_diml_sb=1; blk_diml_sb<=subblk_k; blk_diml_sb++){
		blk_diml = blk_diml_sb*subblk_diml;

	        blk_m = (m%blk_dimi==0)?m/blk_dimi: m/blk_dimi+1;
	        blk_n = (n%blk_dimj==0)?n/blk_dimj: n/blk_dimj+1;
	        blk_k = (k%blk_diml==0)?k/blk_diml: k/blk_diml+1;

		a = blk_dimi*blk_diml;
		b = blk_dimj*blk_diml;
		c = blk_dimi*blk_dimj;
                
		a_region = (a%num_bank_a==0)?a/num_bank_a:a/num_bank_a+1;
		b_region = (b%num_bank_b==0)?b/num_bank_b:b/num_bank_b+1;
		c_region = (a%num_bank_c==0)?c/num_bank_c:c/num_bank_c+1;

		if((a_region <= Memory::membanks[0].size)
		    && (b_region <= Memory::membanks[0].size)
		    && (c_region <= Memory::membanks[0].size)){
	 
		  unsigned long long cur_spill = spill_a_buffer()+spill_b_buffer();
		  unsigned long long cur_perf = getPerf();

		  if((cur_spill < num_spill)
		      || ((cur_spill == num_spill) && (cur_perf < perf))){
		    num_spill = cur_spill;
		    perf = cur_perf;

		    opti_para.subblk_dimi = subblk_dimi;
		    opti_para.subblk_dimj = subblk_dimj;
		    opti_para.subblk_diml = subblk_diml;
		    opti_para.blk_dimi = blk_dimi;
		    opti_para.blk_dimj = blk_dimj;
		    opti_para.blk_diml = blk_diml;

		    opti_para.m_ex = blk_m*blk_dimi;
		    opti_para.n_ex = blk_n*blk_dimj;
		    opti_para.k_ex = blk_k*blk_diml;

		    opti_para.num_bank_a = num_bank_a;
		    opti_para.num_bank_b = num_bank_b;
		    opti_para.num_bank_c = num_bank_c;
		  }

		}
	      }
	    }
	  }
	  //cout << "num spill " << num_spill << endl;
	}
      }
    }
  }

  opti_para.k_stage = opti_para.subblk_diml;
  opti_para.num_cb = opti_para.subblk_dimi*opti_para.subblk_dimj;

  //cout << "num spill " << num_spill << endl;
  //cout << "perf " << perf << endl;
}
*/



